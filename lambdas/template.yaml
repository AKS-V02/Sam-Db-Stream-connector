AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: > 
  Template For Lambda Functions


Parameters:
  InputTable: 
    Type: String
    Description: Reference to Input Table Name
  InputTablePrimaryKey: 
    Type: String
    Description: Reference to Input Table primary key
  InputTableSortKey: 
    Type: String
    Description: Reference to Input Table Sort Key
  InputTableLSIKey: 
    Type: String
    Description: Reference to Input Table Lsi Key
  OutputTable: 
    Type: String
    Description: Reference to Output Table Name
  OutputTablePrimaryKey: 
    Type: String
    Description: Reference to Input Table primary key
  OutputTableSortKey: 
    Type: String
    Description: Reference to Input Table Sort Key
  OutputTableLSIKey: 
    Type: String
    Description: Reference to Input Table Lsi Key
  InputTableStreamArn: 
    Type: String
    Description: Reference to Input Table Stream
  QueUrl: 
    Type: String
    Description: Reference to My SQS Que
  QueArn:
    Type: String
    Description: Reference to My SQS Que Arn
  DLQArn:
    Type: String
    Description: Reference to DLQ Que Arn
  QueName: 
    Type: String
    Description: Reference to My SQS Que Name
  DLQName:
    Type: String
    Description: Reference to My DLQ Que Name
  joltTable:
    Type: String
    Description: Reference to Jolt Table Name
  joltTablePrimaryKey: 
    Type: String
    Description: Reference to Input Table primary key
  joltTableSortKey: 
    Type: String
    Description: Reference to Input Table Sort Key
  OutputTableLsi: 
    Type: String
    Description: Reference to Input Table Sort Key
  InputTableLsi: 
    Type: String
    Description: Reference to Input Table Sort Key
  configsetName:  
    Type: String
    Description: Reference to configsetName for ses
  templateName:
    Type: String
    Description: Reference to templateName for ses
  DBClusterArn: 
    Type: String
    Description: Reference to RDS Db Cluster
  DatabaseName: 
    Type: String
    Description: Reference to RDS DatabaseName
  SecretArn: 
    Type: String
    Description: Reference to SecretArn

Globals:
  Function:
    Runtime: java11
    MemorySize: 512
    Timeout: 30

Resources:
  commonAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: sam-app-api

  InputDataCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: inputDataTable\input-create
      FunctionName: !Join [ "-" , ["InputDataCreate" , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.input.handler.Create::handleRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref InputTable
      Environment:
        Variables:
          TABLE_NAME: !Ref InputTable
          PRIMARY_KEY: !Ref InputTablePrimaryKey
          SORT_KEY: !Ref InputTableSortKey
          LSI_KEY: !Ref InputTableLSIKey
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /input
            Method: POST
            RestApiId: !Ref commonAPIGateway

  InputDataCreateLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - InputDataCreate
    Properties:
      LogGroupName: !Sub /aws/lambda/${InputDataCreate}
      RetentionInDays: 1

  InputDataRead:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: inputDataTable\input-read
      FunctionName: !Join [ "-" , ["InputDataRead" , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.input.handler.Read::handleRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref InputTable
      Environment:
        Variables:
          TABLE_NAME: !Ref InputTable
          PRIMARY_KEY: !Ref InputTablePrimaryKey
          SORT_KEY: !Ref InputTableSortKey
          LSI_KEY: !Ref InputTableLSIKey
          INDEX_NAME: !Ref InputTableLsi
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /input
            Method: GET
            RestApiId: !Ref commonAPIGateway

  InputDataReadLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - InputDataRead
    Properties:
      LogGroupName: !Sub /aws/lambda/${InputDataRead}
      RetentionInDays: 1

  OutputDataRead:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: outputDataTable\output-read
      FunctionName: !Join [ "-" , ["OutputDataRead" , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.output.handler.Read::handleRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref OutputTable
      Environment:
        Variables:
          TABLE_NAME: !Ref OutputTable
          PRIMARY_KEY: !Ref OutputTablePrimaryKey
          SORT_KEY: !Ref OutputTableSortKey
          LSI_KEY: !Ref OutputTableLSIKey
          INDEX_NAME: !Ref OutputTableLsi
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /output
            Method: GET
            RestApiId: !Ref commonAPIGateway

  OutputDataReadLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - OutputDataRead
    Properties:
      LogGroupName: !Sub /aws/lambda/${OutputDataRead}
      RetentionInDays: 1

  SqsTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sqsTrigger
      FunctionName: !Join [ "-" , ["SqsTrigger" , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.functions.handler.PushData::handleRequest
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !Ref QueName
        - DynamoDBReadPolicy:
            TableName: !Ref joltTable
        - SQSSendMessagePolicy:
            QueueName: !Ref DLQName    
      Environment:
        Variables:
          QUEUE_URL: !Ref QueUrl
          TABLE_NAME: !Ref joltTable
          PRIMARY_KEY: !Ref joltTablePrimaryKey
          SORT_KEY: !Ref joltTableSortKey
      # ReservedConcurrentExecutions: 30
      Events:
        InputDDBTable:
          Type: DynamoDB
          Properties:
            Stream: !Ref InputTableStreamArn
            StartingPosition: TRIM_HORIZON
            FunctionResponseTypes: 
              - ReportBatchItemFailures
            MaximumBatchingWindowInSeconds: 10
            DestinationConfig: 
              OnFailure:
                Destination: !Ref DLQArn
            MaximumRetryAttempts: 1
            BatchSize: 10

  SqsTriggerLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - SqsTrigger
    Properties:
      LogGroupName: !Sub /aws/lambda/${SqsTrigger}
      RetentionInDays: 1


  SqsListner:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sqslistner
      FunctionName: !Join [ "-" , ["SqsListner" , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.functions.handler.ProcessMsg::handleRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref OutputTable
      Environment:
        Variables:
          TABLE_NAME: !Ref OutputTable
          PRIMARY_KEY: !Ref OutputTablePrimaryKey
          SORT_KEY: !Ref OutputTableSortKey
          LSI_KEY: !Ref OutputTableLSIKey
      # ReservedConcurrentExecutions: 30
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !Ref QueArn
            FunctionResponseTypes: 
              - ReportBatchItemFailures
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10
  
  SqsListnerLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - SqsListner
    Properties:
      LogGroupName: !Sub /aws/lambda/${SqsListner}
      RetentionInDays: 1
  
  RdsDdlStatement:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: RdsDatabase\rdsDdlStatement
      FunctionName: !Join [ "-" , [ !Sub '${DatabaseName}-RdsDdlStatement' , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.rds.handler.DdlStatement::handleRequest
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
          - Effect: Allow
            Action: 
              - 'rds-data:ExecuteStatement'
              # - "rds-data:BatchExecuteStatement"
              # - "rds-data:BeginTransaction"
              # - "rds-data:CommitTransaction"
              # - "rds-data:RollbackTransaction"
            Resource: !Ref DBClusterArn
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DatabaseName
          SecretArn: !Ref SecretArn
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /rdsconnect/{proxy+}
            Method: POST
            RestApiId: !Ref commonAPIGateway
  
  RdsDdlStatementLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - RdsDdlStatement
    Properties:
      LogGroupName: !Sub /aws/lambda/${RdsDdlStatement}
      RetentionInDays: 1


  RdsDmlStatement:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: RdsDatabase\rdsDmlStatement
      FunctionName: !Join [ "-" , [ !Sub '${DatabaseName}-RdsDmlStatement' , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.rds.handler.DmlStatement::handleRequest
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
          - Effect: Allow
            Action:
              - 'rds-data:ExecuteStatement'
              - "rds-data:BatchExecuteStatement"
              # - "rds-data:BeginTransaction"
              # - "rds-data:CommitTransaction"
              # - "rds-data:RollbackTransaction"
            Resource: !Ref DBClusterArn
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DatabaseName
          SecretArn: !Ref SecretArn
      Events:
        ApiEvents1:
          Type: Api
          Properties:
            Path: /rdsconnect/{proxy+}
            Method: PUT
            RestApiId: !Ref commonAPIGateway
        ApiEvents2:
          Type: Api
          Properties:
            Path: /rdsconnect/{proxy+}
            Method: DELETE
            RestApiId: !Ref commonAPIGateway
            
  RdsDmlStatementLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - RdsDmlStatement
    Properties:
      LogGroupName: !Sub /aws/lambda/${RdsDmlStatement}
      RetentionInDays: 1



  RdsQuiry:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: RdsDatabase\rdsQuiryStatement
      FunctionName: !Join [ "-" , [ !Sub '${DatabaseName}-RdsQuiry' , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.rds.handler.QuiryStatement::handleRequest
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
          - Effect: Allow
            Action:
              - 'rds-data:ExecuteStatement'
              # - "rds-data:BatchExecuteStatement"
              # - "rds-data:BeginTransaction"
              # - "rds-data:CommitTransaction"
              # - "rds-data:RollbackTransaction"
            Resource: !Ref DBClusterArn
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DatabaseName
          SecretArn: !Ref SecretArn
      Events:
        ApiEvents1:
          Type: Api
          Properties:
            Path: /rdsconnect/{proxy+}
            Method: GET
            RestApiId: !Ref commonAPIGateway
        ApiEvents2:
          Type: Api
          Properties:
            Path: /rdsconnect/{proxy+}
            Method: HEAD
            RestApiId: !Ref commonAPIGateway
  
  RdsQuiryLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - RdsQuiry
    Properties:
      LogGroupName: !Sub /aws/lambda/${RdsQuiry}
      RetentionInDays: 1
  
  SendEmailFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: sendEmail
      FunctionName: !Join [ "-" , [ !Sub '${templateName}-Template-Email' , !Select [ 7, !Split [ "-", !Ref 'AWS::StackId' ] ] ] ]
      Handler: com.send.handler.SendEmail::handleRequest
      Policies:
        - SESBulkTemplatedCrudPolicy_v2:
            IdentityName: "*"
            TemplateName: !Ref templateName
        - Statement:
            - Effect: Allow
              Action:
                - "ses:SendEmail"
                - "ses:SendTemplatedEmail"
                - "ses:SendRawEmail"
                - "ses:SendBulkTemplatedEmail"
              Resource: 
                - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/${configsetName}"
                # - !Sub "arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
                # - !Sub "arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:template/${templateName}"
      Environment:
        Variables:
          Template: !Ref templateName
          ConfigsetName: !Ref configsetName
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /sendemail
            Method: POST
            RestApiId: !Ref commonAPIGateway
  
  SendEmailFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: 
      - SendEmailFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${SendEmailFunction}
      RetentionInDays: 1
      
  
Outputs:
  commonEndpoint:
    Description: API Gateway Common Endpoint
    Value:
      Fn::Sub: https://${commonAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/