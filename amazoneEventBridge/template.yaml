AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An Amazon Event Bridge with event rule to invoke sqs and Lambda

Parameters:
  EventBusName:
    Description: custom event bus name.
    Type: String
    Default: custom-event-bus
  TargetQueName:
    Description: Target Que Name for Event Rule.
    Type: String
  DeadLeatterQueName:
    Description: Target Que Name for Event Rule.
    Type: String
  TargetQueArn:
    Description: Target Que Arn for Event Rule.
    Type: String
  DeadLeatterQueArn:
    Description: Dead Letter Que Arn for Target.
    Type: String


Resources:
  CustomEventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: !Sub ${AWS::StackName}-${EventBusName}
      
  # EventBridgeQueRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: AllowEventBridgeToAssumeRole 
  #           Effect: Allow
  #           Action:
  #             - 'sts:AssumeRole'
  #           Principal:
  #             Service:
  #               - events.amazonaws.com
  #           # Condition:
  #           #   ArnEquals:
  #           #     "aws:PrincipalArn": !GetAtt CustomEventBus.Arn
  #     Policies:
  #       - PolicyName: CustomSqsSendMassagePolicy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - "sqs:SendMessage"
  #               Resource:
  #                 - !Ref TargetQueArn
  #                 - !Ref DeadLeatterQueArn
  #               Condition:
  #                 ArnEquals:
  #                   "aws:SourceArn": !GetAtt CustomEventBus.Arn
        # - SQSSendMessagePolicy:
        #     QueueName: !Ref TargetQueName

  EventQueueRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "SQSEventRule"
      EventBusName: !Ref CustomEventBus
      Name: !Sub ${AWS::StackName}-${EventBusName}-QueEventRule
      EventPattern: 
        account: 
          - !Sub '${AWS::AccountId}'
        source:
          - "test.event"
        detail-type:
          - "myDetailType"
      Targets: 
        - Arn: !Ref TargetQueArn
          Id: "Queue"
          InputPath: $.detail
          # RoleArn: !GetAtt EventBridgeQueRole.Arn
          DeadLetterConfig: 
            Arn: !Ref DeadLeatterQueArn
          RetryPolicy:
            MaximumEventAgeInSeconds : 60 
            MaximumRetryAttempts : 1
  
  EventBridgeToQeuPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource: 
            - !Ref TargetQueArn
            - !Ref DeadLeatterQueArn
          Condition:
            ArnEquals:
              "aws:SourceArn": !GetAtt EventQueueRule.Arn
      Queues:
        - !Ref TargetQueName
        - !Ref DeadLeatterQueName

  # EventBridgeToDLQPolicy:
  #   Type: AWS::SQS::QueuePolicy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: events.amazonaws.com
  #         Action: SQS:SendMessage
  #         Resource: !Ref DeadLeatterQueArn
  #         Condition:
  #           ArnEquals:
  #             "aws:SourceArn": !GetAtt EventQueueRule.Arn
  #     Queues:
  #       - !Ref DeadLeatterQueName


Outputs:
  EventBusName:
    Description: Event Bus Arn
    Value: !Ref CustomEventBus
  EventBusArn:
    Description: Event Bus Arn
    Value: !GetAtt CustomEventBus.Arn